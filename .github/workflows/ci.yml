name: CI - Agent Configuration Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  validate:
    name: Validate Agent Configuration
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq shellcheck

      - name: Validate Agent Files
        run: |
          echo "Validating agent configuration files..."
          
          # Check modified agent files
          MODIFIED_AGENTS=$(git diff --name-only HEAD~1 | grep "\.claude/agents/.*\.md$" || true)
          
          if [[ -n "$MODIFIED_AGENTS" ]]; then
            for agent in $MODIFIED_AGENTS; do
              if [[ -f "$agent" ]]; then
                echo "Checking $agent..."
                # Basic validation for required fields
                grep -q "^name:" "$agent" || { echo "Missing name field in $agent"; exit 1; }
                grep -q "^description:" "$agent" || { echo "Missing description field in $agent"; exit 1; }
                echo "✓ $agent is valid"
              fi
            done
          else
            echo "No agent files modified"
          fi

      - name: Validate Scripts
        run: |
          echo "Validating shell scripts..."
          
          # Check modified hook scripts
          MODIFIED_HOOKS=$(git diff --name-only HEAD~1 | grep "\.claude/hooks/.*\.sh$" || true)
          
          if [[ -n "$MODIFIED_HOOKS" ]]; then
            for hook in $MODIFIED_HOOKS; do
              if [[ -f "$hook" ]]; then
                echo "Checking $hook..."
                bash -n "$hook" || { echo "Syntax error in $hook"; exit 1; }
                shellcheck "$hook" || { echo "ShellCheck failed for $hook"; exit 1; }
                echo "✓ $hook is valid"
              fi
            done
          else
            echo "No hook scripts modified"
          fi

      - name: Validate Settings
        run: |
          echo "Validating settings.json..."
          
          if [[ -f ".claude/settings.json" ]]; then
            jq empty ".claude/settings.json" || { echo "Invalid JSON in settings.json"; exit 1; }
            echo "✓ settings.json is valid"
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Basic Secret Scan
        run: |
          echo "Scanning for potential secrets..."
          
          # Check for obvious secret patterns in changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1)
          
          if [[ -n "$CHANGED_FILES" ]]; then
            for file in $CHANGED_FILES; do
              if [[ -f "$file" ]] && grep -i -E "(password|secret|key|token)\s*[:=]\s*[\"'][^\"']+[\"']" "$file" | grep -v -E "(example|placeholder|test|TODO)"; then
                echo "Potential secret found in $file"
                exit 1
              fi
            done
          fi
          
          echo "✓ No secrets detected"

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: Report Results
        run: |
          echo "## Validation Results"
          echo "Validation: ${{ needs.validate.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.validate.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✓ All checks passed"
          else
            echo "✗ Some checks failed"
            exit 1
          fi