name: CI - Pull Request Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  validate-changes:
    name: Validate Configuration Changes
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq shellcheck

      - name: Make validation script executable
        run: chmod +x ./validate-setup.sh

      - name: Run Full Ecosystem Validation
        run: |
          echo "üîç Running comprehensive validation..."
          ./validate-setup.sh

      - name: Validate Modified Agents
        run: |
          echo "üîç Checking modified agent files..."
          
          # Get list of modified agent files
          MODIFIED_AGENTS=$(git diff --name-only origin/main...HEAD | grep "\.claude/agents/.*\.md$" || true)
          
          if [[ -n "$MODIFIED_AGENTS" ]]; then
            echo "Modified agents detected:"
            echo "$MODIFIED_AGENTS"
            
            for agent in $MODIFIED_AGENTS; do
              if [[ -f "$agent" ]]; then
                echo "Validating $agent..."
                
                # Check required fields
                if ! grep -q "^name:" "$agent"; then
                  echo "‚ùå Missing 'name:' field in $agent"
                  exit 1
                fi
                
                if ! grep -q "^description:" "$agent"; then
                  echo "‚ùå Missing 'description:' field in $agent"
                  exit 1
                fi
                
                if ! grep -q "^tools:" "$agent"; then
                  echo "‚ùå Missing 'tools:' field in $agent"
                  exit 1
                fi
                
                echo "‚úÖ $agent validation passed"
              fi
            done
          else
            echo "‚ÑπÔ∏è No agent files modified"
          fi

      - name: Validate Modified Hook Scripts
        run: |
          echo "üîç Checking modified hook scripts..."
          
          # Get list of modified hook scripts
          MODIFIED_HOOKS=$(git diff --name-only origin/main...HEAD | grep "\.claude/hooks/.*\.sh$" || true)
          
          if [[ -n "$MODIFIED_HOOKS" ]]; then
            echo "Modified hooks detected:"
            echo "$MODIFIED_HOOKS"
            
            for hook in $MODIFIED_HOOKS; do
              if [[ -f "$hook" ]]; then
                echo "Validating $hook..."
                
                # Check syntax
                if ! bash -n "$hook"; then
                  echo "‚ùå Syntax error in $hook"
                  exit 1
                fi
                
                # Run shellcheck
                if ! shellcheck "$hook"; then
                  echo "‚ùå ShellCheck failed for $hook"
                  exit 1
                fi
                
                echo "‚úÖ $hook validation passed"
              fi
            done
          else
            echo "‚ÑπÔ∏è No hook scripts modified"
          fi

      - name: Check Settings Changes
        run: |
          echo "üîç Checking settings.json changes..."
          
          if git diff --name-only origin/main...HEAD | grep -q "\.claude/settings\.json"; then
            echo "Settings.json modified, validating..."
            
            if [[ -f ".claude/settings.json" ]]; then
              if ! jq empty ".claude/settings.json"; then
                echo "‚ùå Invalid JSON in settings.json"
                exit 1
              fi
              echo "‚úÖ Settings.json is valid JSON"
            fi
          else
            echo "‚ÑπÔ∏è Settings.json not modified"
          fi

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Secret Scanning
        run: |
          echo "üîç Scanning for hardcoded secrets..."
          
          # Check for common secret patterns in changed files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          
          if [[ -n "$CHANGED_FILES" ]]; then
            for file in $CHANGED_FILES; do
              if [[ -f "$file" ]]; then
                # Check for potential secrets
                if grep -i -E "(password|secret|key|token|api[_-]?key)\s*[:=]\s*[\"'][^\"']+[\"']" "$file" | grep -v "example\|placeholder\|TODO\|FIXME\|test"; then
                  echo "‚ùå Potential hardcoded secret found in $file"
                  echo "Please review the file and ensure no real secrets are committed"
                  exit 1
                fi
              fi
            done
          fi
          
          echo "‚úÖ No hardcoded secrets detected"

      - name: Check File Permissions
        run: |
          echo "üîç Checking file permissions..."
          
          # Check for files with overly permissive permissions
          find . -type f -perm -o+w ! -path "./.git/*" ! -path "./node_modules/*" | while read -r file; do
            echo "‚ö†Ô∏è File has world-writable permissions: $file"
          done
          
          # Check for executable files that shouldn't be
          find . -name "*.md" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" | while read -r file; do
            if [[ -x "$file" ]]; then
              echo "‚ö†Ô∏è Documentation/config file is executable (may not be intended): $file"
            fi
          done
          
          echo "‚úÖ File permissions check completed"

  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck yamllint

      - name: Lint Shell Scripts
        run: |
          echo "üîç Linting shell scripts..."
          
          find . -name "*.sh" -not -path "./.git/*" | while read -r script; do
            echo "Checking $script..."
            shellcheck "$script" || exit 1
          done
          
          echo "‚úÖ All shell scripts passed linting"

      - name: Lint YAML Files
        run: |
          echo "üîç Linting YAML files..."
          
          find . -name "*.yml" -o -name "*.yaml" | while read -r yaml_file; do
            echo "Checking $yaml_file..."
            yamllint "$yaml_file" || exit 1
          done
          
          echo "‚úÖ All YAML files passed linting"

      - name: Check Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'

      - name: Validate Agent Name Consistency
        run: |
          echo "üîç Checking agent name consistency..."
          
          # Get all agent names from files
          AGENT_FILES=(.claude/agents/*.md)
          
          for agent_file in "${AGENT_FILES[@]}"; do
            if [[ -f "$agent_file" ]]; then
              filename=$(basename "$agent_file" .md)
              
              # Check if agent is referenced in hook scripts
              if ! grep -q "$filename" .claude/hooks/auto-delegate-agent.sh; then
                echo "‚ö†Ô∏è Agent $filename not referenced in auto-delegate-agent.sh"
              fi
              
              # Check if agent name in file matches filename
              if grep -q "^name:" "$agent_file"; then
                agent_name=$(grep "^name:" "$agent_file" | cut -d: -f2 | xargs)
                if [[ "$agent_name" != "$filename" ]]; then
                  echo "‚ö†Ô∏è Agent name mismatch: file=$filename, name=$agent_name"
                fi
              fi
            fi
          done
          
          echo "‚úÖ Agent name consistency check completed"

  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Required Documentation
        run: |
          echo "üîç Checking required documentation..."
          
          REQUIRED_DOCS=(
            "README.md"
            "CLAUDE.md"
            ".claude/AGENT_CLASSIFICATION.md"
            ".claude/commands/agents-info.md"
          )
          
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [[ ! -f "$doc" ]]; then
              echo "‚ùå Missing required documentation: $doc"
              exit 1
            fi
            
            if [[ ! -s "$doc" ]]; then
              echo "‚ùå Required documentation is empty: $doc"
              exit 1
            fi
            
            echo "‚úÖ Found: $doc"
          done

      - name: Check Documentation Quality
        run: |
          echo "üîç Checking documentation quality..."
          
          # Check for TODO/FIXME in documentation
          if find . -name "*.md" -exec grep -l "TODO\|FIXME" {} \; | head -1; then
            echo "‚ö†Ô∏è Found TODO/FIXME items in documentation - please address before release"
          fi
          
          # Check for broken internal links
          find . -name "*.md" -exec grep -H "\]\(\./" {} \; | while read -r link; do
            file=$(echo "$link" | cut -d: -f1)
            path=$(echo "$link" | sed 's/.*](\([^)]*\)).*/\1/')
            
            # Resolve relative path
            full_path=$(dirname "$file")/"$path"
            
            if [[ ! -f "$full_path" ]]; then
              echo "‚ö†Ô∏è Broken internal link in $file: $path"
            fi
          done
          
          echo "‚úÖ Documentation quality check completed"

  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-changes, security-analysis, quality-checks, documentation-check]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: Create PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};
            
            let summary = "## üîç PR Validation Summary\n\n";
            let allPassed = true;
            
            const jobs = [
              { name: "Configuration Validation", key: "validate-changes" },
              { name: "Security Analysis", key: "security-analysis" },
              { name: "Code Quality Checks", key: "quality-checks" },
              { name: "Documentation Validation", key: "documentation-check" }
            ];
            
            for (const job of jobs) {
              const result = needs[job.key]?.result || 'unknown';
              const icon = result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : '‚ö†Ô∏è';
              summary += `${icon} **${job.name}**: ${result}\n`;
              
              if (result !== 'success') {
                allPassed = false;
              }
            }
            
            if (allPassed) {
              summary += "\nüéâ All validations passed! This PR is ready for review.";
            } else {
              summary += "\n‚ö†Ô∏è Some validations failed. Please check the workflow logs and address any issues.";
            }
            
            // Find existing comment and update or create new one
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Validation Summary')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }