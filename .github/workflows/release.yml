name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq

      - name: Basic Validation
        run: |
          echo "Validating basic configuration..."
          
          # Check core files exist
          [[ -f ".claude/settings.json" ]] || { echo "Missing settings.json"; exit 1; }
          [[ -f "CLAUDE.md" ]] || { echo "Missing CLAUDE.md"; exit 1; }
          
          # Validate JSON
          jq empty ".claude/settings.json" || { echo "Invalid settings.json"; exit 1; }
          
          echo "âœ“ Basic validation passed"

      - name: Create Version Tag
        id: tag
        run: |
          # Simple semantic versioning based on commit messages
          if git log --oneline -1 | grep -E '\[major\]|\[breaking\]'; then
            VERSION_TYPE="major"
          elif git log --oneline -1 | grep -E '\[minor\]|\[feature\]|\[feat\]'; then
            VERSION_TYPE="minor"
          else
            VERSION_TYPE="patch"
          fi
          
          # Get current version or start at 1.0.0
          CURRENT_VERSION=$(git tag --sort=-version:refname | head -1 | sed 's/^v//' || echo "0.0.0")
          
          # Calculate new version
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          case $VERSION_TYPE in
            major) NEW_VERSION="$((major + 1)).0.0" ;;
            minor) NEW_VERSION="$major.$((minor + 1)).0" ;;
            patch) NEW_VERSION="$major.$minor.$((patch + 1))" ;;
          esac
          
          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: v$NEW_VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          name: Release ${{ steps.tag.outputs.version }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}