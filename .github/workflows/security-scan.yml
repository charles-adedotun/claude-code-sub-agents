name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
    paths:
      - '.claude/**'
      - '**/*.sh'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.json'
  pull_request:
    branches: [main]
    paths:
      - '.claude/**'
      - '**/*.sh'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.json'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate Trivy Report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
        continue-on-error: true

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Manual Secret Pattern Check
        run: |
          echo "üîç Scanning for common secret patterns..."
          
          # Define patterns to check
          SECRET_PATTERNS=(
            "(password|passwd|pwd)\s*[:=]\s*[\"'][^\"']{8,}[\"']"
            "(secret|key|token|api[_-]?key)\s*[:=]\s*[\"'][^\"']{16,}[\"']"
            "-----BEGIN (RSA |DSA |EC |OPENSSH |PGP )?PRIVATE KEY-----"
            "(aws_access_key_id|aws_secret_access_key)\s*[:=]\s*[\"'][^\"']+[\"']"
            "sk-[a-zA-Z0-9]{20,50}"
            "ghp_[a-zA-Z0-9]{36}"
            "glpat-[a-zA-Z0-9_\-]{20}"
          )
          
          FOUND_SECRETS=false
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" . --exclude-dir=.git --exclude="*.log" | grep -v "example\|placeholder\|TODO\|FIXME\|test\|demo"; then
              echo "‚ùå Potential secret found matching pattern: $pattern"
              FOUND_SECRETS=true
            fi
          done
          
          if [ "$FOUND_SECRETS" = true ]; then
            echo "‚ùå Potential secrets detected! Please review and remove any real secrets."
            exit 1
          else
            echo "‚úÖ No secrets detected"
          fi

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check for package.json
        id: check-package
        run: |
          if [ -f "package.json" ]; then
            echo "has-package=true" >> $GITHUB_OUTPUT
          else
            echo "has-package=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-package.outputs.has-package == 'true'
        run: npm ci

      - name: Run npm audit
        if: steps.check-package.outputs.has-package == 'true'
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level=moderate || exit 1

      - name: Check for Python requirements
        id: check-python
        run: |
          if [ -f "requirements.txt" ] || [ -f "Pipfile" ] || [ -f "pyproject.toml" ]; then
            echo "has-python=true" >> $GITHUB_OUTPUT
          else
            echo "has-python=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python
        if: steps.check-python.outputs.has-python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install safety
        if: steps.check-python.outputs.has-python == 'true'
        run: pip install safety

      - name: Run Python safety check
        if: steps.check-python.outputs.has-python == 'true'
        run: |
          echo "üîç Running Python safety check..."
          if [ -f "requirements.txt" ]; then
            safety check -r requirements.txt
          else
            echo "‚ÑπÔ∏è No requirements.txt found, skipping Python dependency scan"
          fi

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check for Docker files
        id: check-docker
        run: |
          if find . -name "Dockerfile*" -o -name "docker-compose*.yml" -o -name "docker-compose*.yaml" | head -1; then
            echo "has-docker=true" >> $GITHUB_OUTPUT
          else
            echo "has-docker=false" >> $GITHUB_OUTPUT
          fi

      - name: Scan Dockerfile with Hadolint
        if: steps.check-docker.outputs.has-docker == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning
        continue-on-error: true

      - name: Scan Docker Compose files
        if: steps.check-docker.outputs.has-docker == 'true'
        run: |
          echo "üîç Scanning Docker Compose files..."
          
          find . -name "docker-compose*.yml" -o -name "docker-compose*.yaml" | while read -r compose_file; do
            echo "Checking $compose_file..."
            
            # Check for security issues
            if grep -i "privileged.*true" "$compose_file"; then
              echo "‚ö†Ô∏è Privileged container found in $compose_file"
            fi
            
            if grep -i "user.*root" "$compose_file" | grep -v "# "; then
              echo "‚ö†Ô∏è Root user specified in $compose_file"
            fi
            
            if grep -i "network_mode.*host" "$compose_file"; then
              echo "‚ö†Ô∏è Host network mode found in $compose_file"
            fi
          done

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check for Terraform files
        id: check-terraform
        run: |
          if find . -name "*.tf" -o -name "*.tfvars" | head -1; then
            echo "has-terraform=true" >> $GITHUB_OUTPUT
          else
            echo "has-terraform=false" >> $GITHUB_OUTPUT
          fi

      - name: Scan Terraform with tfsec
        if: steps.check-terraform.outputs.has-terraform == 'true'
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

      - name: Check for Kubernetes manifests
        id: check-k8s
        run: |
          if find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "apiVersion\|kind:" | head -1; then
            echo "has-k8s=true" >> $GITHUB_OUTPUT
          else
            echo "has-k8s=false" >> $GITHUB_OUTPUT
          fi

      - name: Scan Kubernetes manifests
        if: steps.check-k8s.outputs.has-k8s == 'true'
        run: |
          echo "üîç Scanning Kubernetes manifests..."
          
          find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "apiVersion\|kind:" | while read -r manifest; do
            echo "Checking $manifest..."
            
            # Check for security issues
            if grep -i "privileged.*true" "$manifest"; then
              echo "‚ö†Ô∏è Privileged container found in $manifest"
            fi
            
            if grep -i "runAsUser.*0" "$manifest" | grep -v "# "; then
              echo "‚ö†Ô∏è Container running as root in $manifest"
            fi
            
            if grep -i "hostNetwork.*true" "$manifest"; then
              echo "‚ö†Ô∏è Host network access found in $manifest"
            fi
            
            if grep -i "hostPID.*true" "$manifest"; then
              echo "‚ö†Ô∏è Host PID access found in $manifest"
            fi
          done

  compliance-check:
    name: Compliance & Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Repository Compliance
        run: |
          echo "üîç Checking repository compliance..."
          
          # Check for required files
          REQUIRED_FILES=(
            "README.md"
            "LICENSE"
            ".gitignore"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "‚ö†Ô∏è Missing required file: $file"
            else
              echo "‚úÖ Found: $file"
            fi
          done
          
          # Check .gitignore for common sensitive patterns
          if [[ -f ".gitignore" ]]; then
            GITIGNORE_PATTERNS=(
              "\.env"
              "\.log"
              "id_rsa"
              "\.pem"
              "\.key"
            )
            
            for pattern in "${GITIGNORE_PATTERNS[@]}"; do
              if grep -q "$pattern" .gitignore; then
                echo "‚úÖ $pattern is properly ignored"
              else
                echo "‚ö†Ô∏è Consider adding $pattern to .gitignore"
              fi
            done
          fi

      - name: Check File Permissions
        run: |
          echo "üîç Checking file permissions..."
          
          # Check for world-writable files
          find . -type f -perm -o+w ! -path "./.git/*" | while read -r file; do
            echo "‚ö†Ô∏è World-writable file found: $file"
          done
          
          # Check for executable scripts
          find . -name "*.sh" -not -perm -u+x | while read -r script; do
            echo "‚ö†Ô∏è Shell script not executable: $script"
          done

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [trivy-scan, secret-scan, dependency-scan, compliance-check]
    if: always()
    steps:
      - name: Generate Security Report
        run: |
          echo "# üîí Security Scanning Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          JOBS=("trivy-scan" "secret-scan" "dependency-scan" "compliance-check")
          NEEDS='${{ toJSON(needs) }}'
          
          for job in "${JOBS[@]}"; do
            # This is a simplified check - in a real scenario you'd parse the JSON
            echo "| $job | ‚úÖ Completed |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "üîç **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "üåø **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY